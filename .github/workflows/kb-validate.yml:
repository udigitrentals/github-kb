name: KB Mirror & Validate

permissions:
  contents: write   # allow the workflow to commit/push to the repo

on:
  push:
    branches: [ main ]
    paths:
      - "kb/**"
      - ".github/schemas/**"
      - ".github/workflows/kb-validate.yml"
  workflow_dispatch:

jobs:
  mirror-validate:
    runs-on: ubuntu-latest
    env:
      RAW_BASE: https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docs
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0            # safer for commits
          persist-credentials: true # needed to push back

      # 1) Mirror kb/*.json -> docs/*.json
      - name: Mirror KB to docs/
        run: |
          mkdir -p docs
          cp -f kb/*.json docs/ || true
          ls -la docs || true

      - name: Commit mirrored docs (if any)
        run: |
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git add docs || true
          git diff --cached --quiet && echo "No doc changes" || git commit -m "Mirror KB to docs [ci]"
          git diff --cached --quiet || git push

      # 2) Quick JSON well-formedness check
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Validate JSON syntax with jq
        run: |
          set -e
          for f in docs/registry.json docs/search.json docs/cross_links.json; do
            echo "Checking $f"
            test -f "$f"
            jq . "$f" >/dev/null
          done

      # 3) Schema validation
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install ajv-cli
        run: npm i -g ajv-cli@5
      - name: Validate against schemas
        run: |
          ajv validate -s .github/schemas/registry.schema.json     -d docs/registry.json     --spec=draft2020
          ajv validate -s .github/schemas/search.schema.json       -d docs/search.json       --spec=draft2020
          ajv validate -s .github/schemas/cross_links.schema.json  -d docs/cross_links.json  --spec=draft2020

      # 4) Hygiene checks (sizes)
      - name: Hygiene checks
        run: |
          set -e
          REG=$(wc -c < docs/registry.json)
          SRCH=$(wc -c < docs/search.json)
          CLNK=$(wc -c < docs/cross_links.json)
          echo "Sizes => registry:$REG search:$SRCH cross_links:$CLNK bytes"
          test "$REG" -lt 20971520
          test "$SRCH" -lt 20971520
          test "$CLNK" -lt 20971520

      # 5) Ping raw URLs (what GPT will fetch)
      - name: Ping raw URLs (HEAD)
        run: |
          set -e
          for name in registry search cross_links; do
            url="$RAW_BASE/${name}.json"
            echo "HEAD $url"
            code=$(curl -s -o /dev/null -w "%{http_code}" -I "$url")
            echo "Status: $code"
            test "$code" = "200"
          done
      - name: Print freshness headers
        run: |
          for name in registry search cross_links; do
            url="$RAW_BASE/${name}.json"
            echo "---- $url"
            curl -s -I "$url" | egrep -i 'last-modified|etag|cache-control|content-length|content-type'
          done
